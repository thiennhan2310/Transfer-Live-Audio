/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment1;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.MediaLocator;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Thien Nhan
 */
public class mainForm extends javax.swing.JFrame {

    String id;
    Object[][] onlineUser,liveAudio,userInRoom;
    callTransmit call;
    callReceive receive;
    int localPort,toPort;
    String ipCallTo;
    String filename,path;
    boolean miss=false;
    
    /**
     * Creates new form mainForm
     */listenRequest lisRequest;
    public mainForm(String id,int port) throws IOException {
        initComponents();
        this.id=id;
        
        loadOnlineUserTable(new Http().getOnlineUser(this.id));
        this.localPort=port;
        control.removeAll();
         control.repaint();
      control.validate();
      control.add(onlineUserPanel);
      control.repaint();
      control.validate();
      sendfile.disable();
     //receive=new callReceive(session,call); //Thread
      
      lisRequest=new listenRequest(this.localPort);
     lisRequest.start();
     
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main = new javax.swing.JPanel();
        iconPanel = new javax.swing.JPanel();
        callIcon = new javax.swing.JLabel();
        streamIcon = new javax.swing.JLabel();
        conferenceIcon = new javax.swing.JLabel();
        control = new javax.swing.JPanel();
        liveAudioPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tLiveRoom = new javax.swing.JTable();
        addLive = new javax.swing.JLabel();
        onlineUserPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tOnlineUser = new javax.swing.JTable();
        controlCall = new javax.swing.JPanel();
        time = new javax.swing.JLabel();
        stopcallIcon = new javax.swing.JLabel();
        addLiveAudio = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        liveID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        liveIP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        livePort = new javax.swing.JTextField();
        addLiveRoom = new javax.swing.JButton();
        liveRoom = new javax.swing.JPanel();
        roomid = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tUserInRoom = new javax.swing.JTable();
        refreshUserInRoom = new javax.swing.JButton();
        browse = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        sendfile = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        Start = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        stopLive = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        signOut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(380, 550));
        getContentPane().setLayout(null);

        callIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/appicon-512x512-pixels.jpg"))); // NOI18N
        callIcon.setToolTipText("Gọi điện");
        callIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        callIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                callIconMouseClicked(evt);
            }
        });

        streamIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stream.jpg"))); // NOI18N
        streamIcon.setToolTipText("Tạo phòng stream");
        streamIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        streamIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                streamIconMouseClicked(evt);
            }
        });

        conferenceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/conference.png"))); // NOI18N
        conferenceIcon.setToolTipText("Tạo phòng họp");
        conferenceIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout iconPanelLayout = new javax.swing.GroupLayout(iconPanel);
        iconPanel.setLayout(iconPanelLayout);
        iconPanelLayout.setHorizontalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iconPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(streamIcon)
                .addGap(71, 71, 71)
                .addComponent(callIcon)
                .addGap(65, 65, 65)
                .addComponent(conferenceIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        iconPanelLayout.setVerticalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, iconPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(streamIcon)
                .addGap(42, 42, 42))
            .addGroup(iconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conferenceIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(iconPanelLayout.createSequentialGroup()
                .addComponent(callIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        control.setLayout(new java.awt.CardLayout());

        tLiveRoom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tLiveRoom.setForeground(new java.awt.Color(255, 51, 51));
        tLiveRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Live Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tLiveRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tLiveRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tLiveRoom);
        if (tLiveRoom.getColumnModel().getColumnCount() > 0) {
            tLiveRoom.getColumnModel().getColumn(0).setResizable(false);
        }

        addLive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add.png"))); // NOI18N
        addLive.setToolTipText("Tạo phòng mới");
        addLive.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addLive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addLiveMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout liveAudioPanelLayout = new javax.swing.GroupLayout(liveAudioPanel);
        liveAudioPanel.setLayout(liveAudioPanelLayout);
        liveAudioPanelLayout.setHorizontalGroup(
            liveAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(liveAudioPanelLayout.createSequentialGroup()
                .addGroup(liveAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(liveAudioPanelLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(addLive))
                    .addGroup(liveAudioPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        liveAudioPanelLayout.setVerticalGroup(
            liveAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liveAudioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(addLive)
                .addContainerGap())
        );

        control.add(liveAudioPanel, "card2");

        tOnlineUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tOnlineUser.setForeground(new java.awt.Color(255, 102, 102));
        tOnlineUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Online"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tOnlineUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tOnlineUserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tOnlineUser);
        if (tOnlineUser.getColumnModel().getColumnCount() > 0) {
            tOnlineUser.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout onlineUserPanelLayout = new javax.swing.GroupLayout(onlineUserPanel);
        onlineUserPanel.setLayout(onlineUserPanelLayout);
        onlineUserPanelLayout.setHorizontalGroup(
            onlineUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, onlineUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addContainerGap())
        );
        onlineUserPanelLayout.setVerticalGroup(
            onlineUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlineUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        control.add(onlineUserPanel, "card3");

        stopcallIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hangup.png"))); // NOI18N
        stopcallIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stopcallIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopcallIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout controlCallLayout = new javax.swing.GroupLayout(controlCall);
        controlCall.setLayout(controlCallLayout);
        controlCallLayout.setHorizontalGroup(
            controlCallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCallLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(controlCallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(controlCallLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(stopcallIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        controlCallLayout.setVerticalGroup(
            controlCallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCallLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(stopcallIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        control.add(controlCall, "card4");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("IP");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Port");

        addLiveRoom.setText("Tạo");
        addLiveRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addLiveRoomMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout addLiveAudioLayout = new javax.swing.GroupLayout(addLiveAudio);
        addLiveAudio.setLayout(addLiveAudioLayout);
        addLiveAudioLayout.setHorizontalGroup(
            addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addLiveAudioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(59, 59, 59)
                .addGroup(addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(livePort, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liveIP, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liveID, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLiveRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        addLiveAudioLayout.setVerticalGroup(
            addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addLiveAudioLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(liveID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(liveIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addLiveAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(livePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addLiveRoom)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        control.add(addLiveAudio, "card5");

        liveRoom.setMaximumSize(new java.awt.Dimension(354, 355));

        roomid.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomid.setForeground(new java.awt.Color(102, 153, 255));
        roomid.setText("Room 444");

        tUserInRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Thành viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tUserInRoom);
        if (tUserInRoom.getColumnModel().getColumnCount() > 0) {
            tUserInRoom.getColumnModel().getColumn(0).setResizable(false);
        }

        refreshUserInRoom.setText("Refresh");
        refreshUserInRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshUserInRoomActionPerformed(evt);
            }
        });

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        jLabel5.setText("Transefer File");

        sendfile.setText("Send");
        sendfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendfileMouseClicked(evt);
            }
        });

        jLabel6.setText("Record");

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        jButton5.setText("Stop");

        stopLive.setText("Exit");
        stopLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopLiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout liveRoomLayout = new javax.swing.GroupLayout(liveRoom);
        liveRoom.setLayout(liveRoomLayout);
        liveRoomLayout.setHorizontalGroup(
            liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(liveRoomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(liveRoomLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(liveRoomLayout.createSequentialGroup()
                                .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(liveRoomLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                                        .addComponent(browse)
                                                        .addGap(44, 44, 44)
                                                        .addComponent(sendfile))
                                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                                        .addComponent(Start)
                                                        .addGap(53, 53, 53)
                                                        .addComponent(jButton5))))))
                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                        .addGap(79, 79, 79)
                                        .addComponent(jLabel5))
                                    .addGroup(liveRoomLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(refreshUserInRoom)
                                        .addGap(41, 41, 41)
                                        .addComponent(stopLive)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(liveRoomLayout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(liveRoomLayout.createSequentialGroup()
                        .addComponent(roomid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(264, 264, 264))))
        );
        liveRoomLayout.setVerticalGroup(
            liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(liveRoomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomid, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(liveRoomLayout.createSequentialGroup()
                        .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshUserInRoom)
                            .addComponent(stopLive))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(browse)
                            .addComponent(sendfile))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel6)
                        .addGap(8, 8, 8)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(liveRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Start)
                            .addComponent(jButton5))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        control.add(liveRoom, "card6");

        status.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        status.setForeground(new java.awt.Color(255, 0, 51));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background-wallpapers-32.jpg"))); // NOI18N

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(control, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iconPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(mainLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(status)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainLayout.createSequentialGroup()
                    .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(control, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainLayout.createSequentialGroup()
                    .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );

        getContentPane().add(main);
        main.setBounds(0, 0, 360, 510);

        jMenu1.setText("File");

        signOut.setText("Sign Out");
        signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutActionPerformed(evt);
            }
        });
        jMenu1.add(signOut);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_callIconMouseClicked
        try {
            control.removeAll();
            control.repaint();
            control.validate();
            
            control.add(onlineUserPanel);
            control.repaint();
            control.validate();
            loadOnlineUserTable(new Http().getOnlineUser(this.id));
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_callIconMouseClicked
    private void loadOnlineUserTable(String online){
        Object[] OnlineUserColumnName={"Online User"};
        TableModel tableModel=new DefaultTableModel(loadTableOnlineUser(online),OnlineUserColumnName);
        tOnlineUser.setModel(tableModel);
    }
   
    private Object[][] loadTableOnlineUser(String online){
       
        String[] user=online.split("@");
         this.onlineUser=new String[user.length][3];
          for (int i = 0; i < user.length; i++) {
                    String[] temp = user[i].split("-");
                    this.onlineUser[i][0] = temp[0];
                    this.onlineUser[i][1] = temp[1];
                    this.onlineUser[i][2] = temp[2];
                }
        
    return this.onlineUser;
}
     private void loadLiveAudioTable(String liveaudio){
        Object[] LiveAudioColumnName={"Living Room"};
        TableModel tableModel=new DefaultTableModel(loadTableLiveAudio(liveaudio),LiveAudioColumnName);
        tLiveRoom.setModel(tableModel);
    }
   
      private Object[][] loadTableLiveAudio(String liveaudio){
       
        String[] live=liveaudio.split("@");
         this.liveAudio=new String[live.length][3];
          for (int i = 0; i < live.length; i++) {
                    String[] temp = live[i].split("-");
                    this.liveAudio[i][0] = temp[0];
                    this.liveAudio[i][1] = temp[1];
                    this.liveAudio[i][2] = temp[2];
                }
        
    return this.liveAudio;
}
     private void loadTableUserInRoom(String user){
         Object[] ColumnName={"Thành viên trong phòng"};
         TableModel tableModel=new DefaultTableModel(loadUserInRoom(user), ColumnName);
         tUserInRoom.setModel(tableModel);
     }
   private Object[][] loadUserInRoom(String user){
      // System.out.println(user);
     String[] userInroom=user.split("@");
       this.userInRoom=new String[userInroom.length][3];
       for (int i = 0; i < userInroom.length; i++) {  
           String[] temp=userInroom[i].split("-");
                    this.userInRoom[i][0]=temp[0];
                     this.userInRoom[i][1]=temp[1];
                      this.userInRoom[i][2]=temp[2];
                    
                   
                }
       return this.userInRoom;
   }   
    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutActionPerformed
        try {
            // TODO add your handling code here:
            Http http=new Http();
            http.signOut(this.id);
            formSignIn in=new formSignIn();         
            if(call!=null)       call.stop();            
            lisRequest.stop();
            this.setVisible(false);
            in.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_signOutActionPerformed

    private void tOnlineUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tOnlineUserMouseClicked
        // TODO add your handling code here:
        int row=tOnlineUser.getSelectedRow();
        int click=JOptionPane.showConfirmDialog(null,"Bạn có muốn gọi điện cho người này ?","Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        
        if(click==JOptionPane.YES_OPTION) //start connect call
        { 
            try {
                status.setText("Connecting...");               
                ipCallTo=this.onlineUser[row][1].toString();
                toPort=Integer.parseInt(this.onlineUser[row][2].toString());
                String from=InetAddress.getLocalHost().toString().split("/")[1];
             Socket  socket=new Socket(ipCallTo,toPort);
        String rq="call-"+from+"-"+String.valueOf(this.localPort);
        socket.getOutputStream().write(rq.getBytes("UTF-8"));
        socket.close();
                     
//            call = new callTransmit(new MediaLocator("javasound://44100"),ipCallTo,"22222");
//                call.start();
//                 String[] session={from+"/22222"};
//                receive=new callReceive(session);
   //      receive.initialize();
//                    control.removeAll();
//                control.repaint();
//                control.validate();
//                
//                control.add(controlCall);
//                control.repaint();
//                control.validate();
//                status.setText("Connected");
               
            
            
            } catch (UnknownHostException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            }


       
           
        }
            //JOptionPane.showMessageDialog(null, this.onlineUser[row][1]);
    }//GEN-LAST:event_tOnlineUserMouseClicked

    private void streamIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamIconMouseClicked
        try {
            // TODO add your handling code here:
            control.removeAll();
            control.repaint();
            control.validate();
            
            control.add(liveAudioPanel);
            control.repaint();
            control.validate();
            loadLiveAudioTable(new Http().getLiveAudio());
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    }//GEN-LAST:event_streamIconMouseClicked

    private void stopcallIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopcallIconMouseClicked
        try {
            // TODO add your handling code here:
            status.setText("Disconnect");
            if(call!=null) call.stop();
            
            if(receive!=null)  {
                miss=receive.isMiss();
                receive.close();
            }
            
            String from=InetAddress.getLocalHost().toString().split("/")[1];
            Socket  socket=new Socket(ipCallTo,toPort);
            String rq="";
            if(!miss)
             rq="stop-"+from+"-"+String.valueOf(this.localPort);
            else
             rq="miss-"+from+"-"+String.valueOf(this.localPort);       
            socket.getOutputStream().write(rq.getBytes("UTF-8"));
            socket.close();
            
            control.removeAll();
            control.repaint();
            control.validate();
            
            control.add(onlineUserPanel);
            control.repaint();
            control.validate();
        } catch (UnknownHostException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_stopcallIconMouseClicked

    private void addLiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLiveMouseClicked
      control.removeAll();
            control.repaint();
            control.validate();
            
            control.add(addLiveAudio);
            control.repaint();
            control.validate();
    }//GEN-LAST:event_addLiveMouseClicked

    private void addLiveRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLiveRoomMouseClicked
        try {
            String ip=liveIP.getText().toString();
            String id=liveID.getText().toString();
            String port=livePort.getText().toString();
            
          String liveaudio=  new Http().addLiveAudio(id, ip, port);
          new Http().enterRoom(this.id, id);
          
           call = new callTransmit(new MediaLocator("javasound://44100"),ip,port);
           call.start();
           roomid.setText("Room "+id);
          stopLive.setText("Stop");
            control.removeAll();
            control.repaint();
            control.validate();
            
            control.add(liveRoom);
            control.repaint();
            control.validate();
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addLiveRoomMouseClicked
    
    private void tLiveRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tLiveRoomMouseClicked
        try {
            // TODO add your handling code here:
            String id_room=liveAudio[tLiveRoom.getSelectedRow()][0].toString();
            String id_user=id;
            String[] sessions={liveAudio[tLiveRoom.getSelectedRow()][1]+"/"+liveAudio[tLiveRoom.getSelectedRow()][2]};
            receive=new callReceive(sessions);
           
           String thanhvientrongphong= new Http().enterRoom(id_user, id_room);
            loadTableUserInRoom(thanhvientrongphong);
            
            
                    control.removeAll();
            control.repaint();
            control.validate();
             roomid.setText("Room "+id_room);
             stopLive.setText("Exit");
            control.add(liveRoom);
            control.repaint();
            control.validate();
             receive.initialize();
            
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_tLiveRoomMouseClicked

    private void stopLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopLiveActionPerformed
        String temp= roomid.getText().toString();
                String id=temp.split(" ")[1];
        if(stopLive.getText().equals("Stop")){
        int confirm=JOptionPane.showConfirmDialog(null, "Bạn muốn dừng phát live?","xác Nhận",JOptionPane.YES_NO_OPTION);
        if(confirm==JOptionPane.YES_OPTION){
            try {
             
                call.stop();
                
                control.removeAll();
                control.repaint();
                control.validate();
                loadLiveAudioTable(new Http().stopLive(id));
                control.add(liveAudioPanel);
                control.repaint();
                control.validate();
            } catch (IOException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       }
       else if(stopLive.getText().equals("Exit")){
             control.removeAll();
                control.repaint();
                control.validate();
               receive.close();
                control.add(liveAudioPanel);
                control.repaint();
                control.validate();
       }
    }//GEN-LAST:event_stopLiveActionPerformed

    private void refreshUserInRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshUserInRoomActionPerformed
        try {
            // TODO add your handling code here:
            String temp= roomid.getText().toString();
            String id=temp.split(" ")[1];
            loadTableUserInRoom(new Http().getUserInRoom(id));
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_refreshUserInRoomActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser=new JFileChooser();
        chooser.setDialogTitle("Send file...");
        int choose=chooser.showOpenDialog(null);
       if(choose==JFileChooser.APPROVE_OPTION){
          File file=chooser.getSelectedFile();
          this.filename=file.getName();
          this.path=file.getPath();
          sendfile.enable(true);
       }
    }//GEN-LAST:event_browseActionPerformed

    private void sendfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendfileMouseClicked
       
            // TODO add your handling code here:
           int row=tUserInRoom.getSelectedRow();
           if(row<0) JOptionPane.showMessageDialog(null, "Xin chọn người bạn muốn gửi file!");
           else{
               try {
                   String ip=userInRoom[row][1].toString();
                   int port=Integer.valueOf(userInRoom[row][2].toString());
                   Socket  socket=new Socket(ip,port);
                   String from =InetAddress.getLocalHost().toString().split("/")[1];
                   String rq="sendfile-"+from+"-"+String.valueOf(this.localPort)+"-"+filename+"-"+path;
                   socket.getOutputStream().write(rq.getBytes("UTF-8"));
                   socket.close();
               } catch (IOException ex) {
                   Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
               }
     
        }
        
    }//GEN-LAST:event_sendfileMouseClicked

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        // TODO add your handling code here:
        String[] session= receive.getSession();
        String[] temp=session[0].split("/");
        String url="rtp://"+temp[0]+":"+temp[1]+"/audio";
        
        String name="ghiam";
        new ghiam(url ,name).start();
    }//GEN-LAST:event_StartActionPerformed

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Start;
    private javax.swing.JLabel addLive;
    private javax.swing.JPanel addLiveAudio;
    private javax.swing.JButton addLiveRoom;
    private javax.swing.JLabel background;
    private javax.swing.JButton browse;
    private javax.swing.JLabel callIcon;
    private javax.swing.JLabel conferenceIcon;
    public javax.swing.JPanel control;
    public javax.swing.JPanel controlCall;
    private javax.swing.JPanel iconPanel;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public javax.swing.JPanel liveAudioPanel;
    private javax.swing.JTextField liveID;
    private javax.swing.JTextField liveIP;
    private javax.swing.JTextField livePort;
    private javax.swing.JPanel liveRoom;
    private javax.swing.JPanel main;
    public javax.swing.JPanel onlineUserPanel;
    private javax.swing.JButton refreshUserInRoom;
    private javax.swing.JLabel roomid;
    private javax.swing.JButton sendfile;
    private javax.swing.JMenuItem signOut;
    private javax.swing.JLabel status;
    private javax.swing.JButton stopLive;
    private javax.swing.JLabel stopcallIcon;
    private javax.swing.JLabel streamIcon;
    private javax.swing.JTable tLiveRoom;
    private javax.swing.JTable tOnlineUser;
    private javax.swing.JTable tUserInRoom;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
}
